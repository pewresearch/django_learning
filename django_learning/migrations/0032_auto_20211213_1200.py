# Generated by Django 3.1.2 on 2021-12-13 12:00

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('django_learning', '0031_auto_20211210_1104'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='entity',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='entity',
            name='command_logs',
        ),
        migrations.RemoveField(
            model_name='entity',
            name='commands',
        ),
        migrations.AlterUniqueTogether(
            name='word2vecmodel',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='word2vecmodel',
            name='command_logs',
        ),
        migrations.RemoveField(
            model_name='word2vecmodel',
            name='commands',
        ),
        migrations.RemoveField(
            model_name='word2vecmodel',
            name='frame',
        ),
        migrations.RemoveField(
            model_name='word2vecmodel',
            name='training_documents',
        ),
        migrations.RemoveField(
            model_name='document',
            name='alternative_text',
        ),
        migrations.RemoveField(
            model_name='document',
            name='duplicate_ids',
        ),
        migrations.RemoveField(
            model_name='document',
            name='entities',
        ),
        migrations.RemoveField(
            model_name='document',
            name='external_link',
        ),
        migrations.RemoveField(
            model_name='document',
            name='is_clean',
        ),
        migrations.RemoveField(
            model_name='document',
            name='original_text',
        ),
        migrations.RemoveField(
            model_name='document',
            name='paragraph_id',
        ),
        migrations.RemoveField(
            model_name='document',
            name='paragraphs',
        ),
        migrations.AddField(
            model_name='document',
            name='classified_labels',
            field=models.ManyToManyField(help_text='Labels that have been assigned to the document by a classification model', related_name='classified_documents', through='django_learning.Classification', to='django_learning.Label'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='coder',
            field=models.ForeignKey(help_text='The coder that completed the assignment', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='django_learning.coder'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='hit',
            field=models.ForeignKey(help_text='The HIT the assignment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='django_learning.hit'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='notes',
            field=models.TextField(help_text='Any coder notes that were submitted alongside the responses', null=True),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='project',
            field=models.ForeignKey(help_text='The project the assignment is associated with (set automatically)', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='django_learning.project'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='sample',
            field=models.ForeignKey(help_text='The sample the assignment is associated with (set automatically)', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='django_learning.sample'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='time_finished',
            field=models.DateTimeField(help_text='When the coder finished coding', null=True),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='time_started',
            field=models.DateTimeField(auto_now_add=True, help_text='When the coder began coding', null=True),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='turk_approved',
            field=models.BooleanField(default=False, help_text="Whether or not the assignment's been approved and paid on Mechanical Turk"),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='turk_id',
            field=models.CharField(help_text='Unique Assignment ID from the Mechanical Turk ID (if applicable)', max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='turk_status',
            field=models.CharField(help_text="The assignment's status on Mechanical Turk (from the last time it was synced with the API)", max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='uncodeable',
            field=models.BooleanField(default=False, help_text="Whether or not the coder marked the assignment as 'uncodeable' or too confusing to complete"),
        ),
        migrations.AlterField(
            model_name='classification',
            name='classification_model',
            field=models.ForeignKey(help_text='The classification model that made the prediction', on_delete=django.db.models.deletion.CASCADE, related_name='classifications', to='django_learning.documentclassificationmodel'),
        ),
        migrations.AlterField(
            model_name='classification',
            name='document',
            field=models.ForeignKey(help_text="The document that's been classified", on_delete=django.db.models.deletion.CASCADE, related_name='classifications', to='django_learning.document'),
        ),
        migrations.AlterField(
            model_name='classification',
            name='label',
            field=models.ForeignKey(help_text='The label applied by the classification model', on_delete=django.db.models.deletion.CASCADE, related_name='classifications', to='django_learning.label'),
        ),
        migrations.AlterField(
            model_name='classificationmodel',
            name='probability_threshold',
            field=models.FloatField(default=None, help_text='Optional probability threshold for binary classifiers', null=True),
        ),
        migrations.AlterField(
            model_name='code',
            name='assignment',
            field=models.ForeignKey(help_text='The assignment that was being coded', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.assignment'),
        ),
        migrations.AlterField(
            model_name='code',
            name='coder',
            field=models.ForeignKey(help_text='The coder that completed the assignment (set automatically)', on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.coder'),
        ),
        migrations.AlterField(
            model_name='code',
            name='consensus_ignore',
            field=models.BooleanField(default=False, help_text='(default is False) if True, this code will be ignored by document dataset extractors if ``exclude_consensus_ignore=True``. This flag gets marked when admins review and correct disagreements.'),
        ),
        migrations.AlterField(
            model_name='code',
            name='date_added',
            field=models.DateTimeField(auto_now_add=True, help_text='The date the code was created'),
        ),
        migrations.AlterField(
            model_name='code',
            name='date_last_updated',
            field=models.DateTimeField(auto_now=True, help_text='The last date the code was modified'),
        ),
        migrations.AlterField(
            model_name='code',
            name='document',
            field=models.ForeignKey(help_text='The document that was coded (set automatically)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.document'),
        ),
        migrations.AlterField(
            model_name='code',
            name='hit',
            field=models.ForeignKey(help_text='The HIT that was completed (set automatically)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.hit'),
        ),
        migrations.AlterField(
            model_name='code',
            name='label',
            field=models.ForeignKey(help_text='A label that the coder selected', on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.label'),
        ),
        migrations.AlterField(
            model_name='code',
            name='notes',
            field=models.TextField(help_text='Notes from the coder, if code-level notes were enabled in the config', null=True),
        ),
        migrations.AlterField(
            model_name='code',
            name='qualification_assignment',
            field=models.ForeignKey(help_text='The qualification assignment that was being coded (if this is linked to a qualification test instead of a HIT)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.qualificationassignment'),
        ),
        migrations.AlterField(
            model_name='code',
            name='sample_unit',
            field=models.ForeignKey(help_text='The sample unit that was coded (set automatically)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.sampleunit'),
        ),
        migrations.AlterField(
            model_name='coder',
            name='user',
            field=models.OneToOneField(help_text="A Django auth User, if it's an in-house coder", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coder', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='document',
            name='coded_labels',
            field=models.ManyToManyField(help_text='Labels that have been assigned to the document by a coder', related_name='coded_documents', through='django_learning.Code', to='django_learning.Label'),
        ),
        migrations.AlterField(
            model_name='document',
            name='freeze_text',
            field=models.BooleanField(default=False, help_text='If True, the document text will be modified and attempts to change it will raise an exception'),
        ),
        migrations.AlterField(
            model_name='document',
            name='language',
            field=models.CharField(help_text='If null (default), this gets auto-detected by ``langdetect``', max_length=5, null=True),
        ),
        migrations.AlterField(
            model_name='document',
            name='ssdeep',
            field=models.CharField(db_index=True, help_text='Locally-sensitive ssdeep hash of the document (set automatically)', max_length=256, null=True),
        ),
        migrations.AlterField(
            model_name='hit',
            name='finished',
            field=models.BooleanField(help_text='Whether or not the HIT is complete (i.e. has been completed by ``num_coders`` coders', null=True),
        ),
        migrations.AlterField(
            model_name='hit',
            name='hit_type',
            field=models.ForeignKey(help_text='The HITType specifying things like how much the HIT pays', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hits', to='django_learning.hittype'),
        ),
        migrations.AlterField(
            model_name='hit',
            name='num_coders',
            field=models.IntegerField(default=1, help_text='Number of coders to complete the HIT'),
        ),
        migrations.AlterField(
            model_name='hit',
            name='sample',
            field=models.ForeignKey(help_text='The sample associated with the HIT (set automatically)', on_delete=django.db.models.deletion.CASCADE, related_name='hits', to='django_learning.sample'),
        ),
        migrations.AlterField(
            model_name='hit',
            name='sample_unit',
            field=models.ForeignKey(help_text='The SampleUnit the HIT is attached to; this is the document that will be coded', on_delete=django.db.models.deletion.CASCADE, related_name='hits', to='django_learning.sampleunit'),
        ),
        migrations.AlterField(
            model_name='hit',
            name='template_name',
            field=models.CharField(help_text='(Optional) name of a custom HTML template', max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name='hit',
            name='turk',
            field=models.BooleanField(default=False, help_text='Whether the HIT was deployed in-house (False) or on Mechanical Turk (True)'),
        ),
        migrations.AlterField(
            model_name='hit',
            name='turk_id',
            field=models.CharField(help_text='Unique HIT ID from the Mechanical Turk API (if applicable)', max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name='hit',
            name='turk_status',
            field=models.CharField(help_text="The HIT's status on Mechanical Turk (from the last time it was synced with the API)", max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='approval_wait_hours',
            field=models.IntegerField(help_text='How many hours to wait before auto-approving completed tasks', null=True),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='description',
            field=models.TextField(help_text='More verbose description', null=True),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='duration_minutes',
            field=models.IntegerField(help_text='Maximum number of minutes Turkers have to complete a single task', null=True),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='keywords',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, help_text='Search terms that Turkers can use to find the task', size=None),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='lifetime_days',
            field=models.IntegerField(help_text='Maximum number of days uncompleted HITs will remain available after creation', null=True),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='min_approve_cnt',
            field=models.IntegerField(help_text='Minimum number of good HITs workers must have done to qualify', null=True),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='min_approve_pct',
            field=models.FloatField(help_text='Minimum approval percentage for workers to qualify for the HITs', null=True),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='name',
            field=models.CharField(help_text='Name of the HIT type (config file name)', max_length=50),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='price',
            field=models.FloatField(help_text='Price per HIT to be paid, in dollars', null=True),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='project',
            field=models.ForeignKey(help_text='Name of the project the HIT type belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='hit_types', to='django_learning.project'),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='title',
            field=models.TextField(help_text='Short name to be given to the task to be performed', null=True),
        ),
        migrations.AlterField(
            model_name='hittype',
            name='turk_id',
            field=models.CharField(help_text="Unique Mechanical Turk ID, if it's been created via the API", max_length=250, null=True, unique=True),
        ),
        migrations.DeleteModel(
            name='DocumentFragment',
        ),
        migrations.DeleteModel(
            name='Entity',
        ),
        migrations.DeleteModel(
            name='Word2VecModel',
        ),
    ]
