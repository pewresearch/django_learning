# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-09 17:16
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_commander', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_started', models.DateTimeField(auto_now_add=True, null=True)),
                ('time_finished', models.DateTimeField(null=True)),
                ('turk_id', models.CharField(max_length=250, null=True)),
                ('turk_status', models.CharField(max_length=40, null=True)),
                ('notes', models.TextField(null=True)),
                ('uncodeable', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, help_text=b'The date the document code was added')),
                ('date_last_updated', models.DateTimeField(auto_now=True, help_text=b'The last date the document code was modified')),
                ('consensus_ignore', models.BooleanField(default=False)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.Assignment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Coder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text=b'Unique name of the coder', max_length=200, unique=True)),
                ('is_mturk', models.BooleanField(default=False, help_text=b'Whether or not the coder is a Mechanical Turk worker')),
                ('command_logs', models.ManyToManyField(related_name='coder_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='coder_related', to='django_commander.Command')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='coder', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text=b'The text content of the document')),
                ('original_text', models.TextField(null=True)),
                ('duplicate_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=[], size=None)),
                ('alternative_text', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=[], size=None)),
                ('date', models.DateTimeField(help_text=b'An optional date associated with the document', null=True)),
                ('is_clean', models.BooleanField(default=False)),
                ('ssdeep', models.CharField(db_index=True, max_length=256, null=True)),
                ('language', models.CharField(max_length=5, null=True)),
                ('paragraph_id', models.IntegerField(null=True)),
                ('freeze_text', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentFragment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scope', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text=b'A dictionary of filter parameters for defining documents within which the fragment can exist')),
                ('hash', models.CharField(db_index=True, max_length=256)),
                ('text', models.TextField()),
                ('command_logs', models.ManyToManyField(related_name='documentfragment_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='documentfragment_related', to='django_commander.Command')),
                ('documents', models.ManyToManyField(related_name='document_fragments', to='django_learning.Document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentNgramSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('percent', models.FloatField()),
                ('command_logs', models.ManyToManyField(related_name='documentngramset_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='documentngramset_related', to='django_commander.Command')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ngram_sets', to='django_learning.Document')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('command_logs', models.ManyToManyField(related_name='documenttopic_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='documenttopic_related', to='django_commander.Command')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='django_learning.Document')),
            ],
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('tag', models.CharField(choices=[(b'per', b'Person'), (b'org', b'Organization'), (b'loc', b'Location')], max_length=30)),
                ('command_logs', models.ManyToManyField(related_name='entity_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='entity_related', to='django_commander.Command')),
            ],
        ),
        migrations.CreateModel(
            name='Example',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quote', models.TextField()),
                ('explanation', models.TextField()),
                ('command_logs', models.ManyToManyField(related_name='example_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='example_related', to='django_commander.Command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HIT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.CharField(max_length=250, null=True)),
                ('num_coders', models.IntegerField(default=1)),
                ('turk', models.BooleanField(default=False)),
                ('turk_id', models.CharField(max_length=250, null=True)),
                ('turk_status', models.CharField(max_length=40, null=True)),
                ('command_logs', models.ManyToManyField(related_name='hit_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='hit_related', to='django_commander.Command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HITType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('title', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=[], size=None)),
                ('price', models.FloatField(null=True)),
                ('approval_wait_hours', models.IntegerField(null=True)),
                ('duration_minutes', models.IntegerField(null=True)),
                ('lifetime_days', models.IntegerField(null=True)),
                ('min_approve_pct', models.FloatField(null=True)),
                ('min_approve_cnt', models.IntegerField(null=True)),
                ('turk_id', models.CharField(max_length=250, null=True, unique=True)),
                ('command_logs', models.ManyToManyField(related_name='hittype_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='hittype_related', to='django_commander.Command')),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(db_index=True, help_text=b'The code value', max_length=50)),
                ('label', models.CharField(help_text=b'A longer label for the code value', max_length=400)),
                ('priority', models.IntegerField(default=1)),
                ('select_as_default', models.BooleanField(default=False)),
                ('command_logs', models.ManyToManyField(related_name='label_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='label_related', to='django_commander.Command')),
            ],
            options={
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='NgramSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('dictionary', models.CharField(db_index=True, max_length=100)),
                ('label', models.CharField(db_index=True, max_length=100, null=True)),
                ('command_logs', models.ManyToManyField(related_name='ngramset_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='ngramset_related', to='django_commander.Command')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True)),
                ('instructions', models.TextField(null=True)),
                ('admins', models.ManyToManyField(related_name='admin_projects', to='django_learning.Coder')),
                ('blacklist', models.ManyToManyField(related_name='blacklisted_projects', to='django_learning.Coder')),
                ('coders', models.ManyToManyField(related_name='projects', to='django_learning.Coder')),
                ('command_logs', models.ManyToManyField(related_name='project_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='project_related', to='django_commander.Command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QualificationAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_started', models.DateTimeField(auto_now_add=True, null=True)),
                ('time_finished', models.DateTimeField(null=True)),
                ('turk_id', models.CharField(max_length=250, null=True)),
                ('turk_status', models.CharField(max_length=40, null=True)),
                ('is_qualified', models.NullBooleanField()),
                ('coder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qualification_assignments', to='django_learning.Coder')),
                ('command_logs', models.ManyToManyField(related_name='qualificationassignment_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='qualificationassignment_related', to='django_commander.Command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QualificationTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('instructions', models.TextField(null=True)),
                ('turk_id', models.CharField(max_length=250, null=True, unique=True)),
                ('title', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=[], size=None)),
                ('price', models.FloatField(null=True)),
                ('approval_wait_hours', models.IntegerField(null=True)),
                ('duration_minutes', models.IntegerField(null=True)),
                ('lifetime_days', models.IntegerField(null=True)),
                ('coders', models.ManyToManyField(related_name='qualification_tests', through='django_learning.QualificationAssignment', to='django_learning.Coder')),
                ('command_logs', models.ManyToManyField(related_name='qualificationtest_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='qualificationtest_related', to='django_commander.Command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('prompt', models.TextField()),
                ('display', models.CharField(choices=[(b'radio', b'radio'), (b'checkbox', b'checkbox'), (b'dropdown', b'dropdown'), (b'text', b'text'), (b'header', b'header')], max_length=20)),
                ('multiple', models.BooleanField(default=False)),
                ('tooltip', models.TextField(null=True)),
                ('priority', models.IntegerField(default=1)),
                ('command_logs', models.ManyToManyField(related_name='question_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='question_related', to='django_commander.Command')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='django_learning.Project')),
                ('qualification_test', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='django_learning.QualificationTest')),
            ],
            options={
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('sampling_method', models.CharField(default=b'random', max_length=200, null=True)),
                ('display', models.CharField(choices=[(b'article', b'Article'), (b'image', b'Image'), (b'audio', b'Audio'), (b'video', b'Video')], max_length=20)),
                ('command_logs', models.ManyToManyField(related_name='sample_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='sample_related', to='django_commander.Command')),
            ],
        ),
        migrations.CreateModel(
            name='SampleUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(default=1.0)),
                ('command_logs', models.ManyToManyField(related_name='sampleunit_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='sampleunit_related', to='django_commander.Command')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sample_units', to='django_learning.Document')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_units', to='django_learning.Sample')),
            ],
        ),
        migrations.CreateModel(
            name='SamplingFrame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('command_logs', models.ManyToManyField(related_name='samplingframe_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='samplingframe_related', to='django_commander.Command')),
                ('documents', models.ManyToManyField(related_name='sampling_frames', to='django_learning.Document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField()),
                ('label', models.CharField(db_index=True, max_length=100, null=True)),
                ('command_logs', models.ManyToManyField(related_name='topic_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='topic_related', to='django_commander.Command')),
            ],
        ),
        migrations.CreateModel(
            name='TopicModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_topics', models.IntegerField(default=100)),
                ('decay', models.FloatField(default=0.8)),
                ('offset', models.IntegerField(default=1)),
                ('passes', models.IntegerField(default=1)),
                ('sample_size', models.IntegerField(default=10000)),
                ('chunk_size', models.IntegerField(default=1000)),
                ('workers', models.IntegerField(default=2)),
                ('model', picklefield.fields.PickledObjectField(editable=False, null=True)),
                ('vectorizer', picklefield.fields.PickledObjectField(editable=False, null=True)),
                ('command_logs', models.ManyToManyField(related_name='topicmodel_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='topicmodel_related', to='django_commander.Command')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_models', to='django_learning.SamplingFrame')),
                ('training_documents', models.ManyToManyField(related_name='topic_models_trained', to='django_learning.Document')),
            ],
        ),
        migrations.CreateModel(
            name='TopicNgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=40)),
                ('weight', models.FloatField()),
                ('command_logs', models.ManyToManyField(related_name='topicngram_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='topicngram_related', to='django_commander.Command')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ngrams', to='django_learning.Topic')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Word2VecModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('window_size', models.IntegerField(default=10)),
                ('use_skipgrams', models.BooleanField(default=False)),
                ('use_sentences', models.BooleanField(default=False)),
                ('dimensions', models.IntegerField(default=300)),
                ('finalized', models.BooleanField(default=False)),
                ('model', picklefield.fields.PickledObjectField(editable=False, null=True)),
                ('command_logs', models.ManyToManyField(related_name='word2vecmodel_related', to='django_commander.CommandLog')),
                ('commands', models.ManyToManyField(related_name='word2vecmodel_related', to='django_commander.Command')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='word2vec_models', to='django_learning.SamplingFrame')),
                ('training_documents', models.ManyToManyField(related_name='word2vec_models_trained', to='django_learning.Document')),
            ],
        ),
        migrations.AddField(
            model_name='topic',
            name='model',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='topics', to='django_learning.TopicModel'),
        ),
        migrations.AddField(
            model_name='sample',
            name='documents',
            field=models.ManyToManyField(related_name='samples', through='django_learning.SampleUnit', to='django_learning.Document'),
        ),
        migrations.AddField(
            model_name='sample',
            name='frame',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='django_learning.SamplingFrame'),
        ),
        migrations.AddField(
            model_name='sample',
            name='hit_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='django_learning.HITType'),
        ),
        migrations.AddField(
            model_name='sample',
            name='parent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subsamples', to='django_learning.Sample'),
        ),
        migrations.AddField(
            model_name='sample',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='django_learning.Project'),
        ),
        migrations.AddField(
            model_name='sample',
            name='qualification_tests',
            field=models.ManyToManyField(related_name='samples', to='django_learning.QualificationTest'),
        ),
        migrations.AddField(
            model_name='qualificationassignment',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='django_learning.QualificationTest'),
        ),
        migrations.AddField(
            model_name='project',
            name='qualification_tests',
            field=models.ManyToManyField(related_name='projects', to='django_learning.QualificationTest'),
        ),
        migrations.AddField(
            model_name='label',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='django_learning.Question'),
        ),
        migrations.AddField(
            model_name='hittype',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hit_types', to='django_learning.Project'),
        ),
        migrations.AddField(
            model_name='hittype',
            name='qualification_tests',
            field=models.ManyToManyField(related_name='hit_types', to='django_learning.QualificationTest'),
        ),
        migrations.AddField(
            model_name='hit',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hits', to='django_learning.Sample'),
        ),
        migrations.AddField(
            model_name='hit',
            name='sample_unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hits', to='django_learning.SampleUnit'),
        ),
        migrations.AddField(
            model_name='example',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examples', to='django_learning.Question'),
        ),
        migrations.AddField(
            model_name='documenttopic',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='django_learning.Topic'),
        ),
        migrations.AddField(
            model_name='documentngramset',
            name='ngram_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='django_learning.NgramSet'),
        ),
        migrations.AddField(
            model_name='document',
            name='coded_labels',
            field=models.ManyToManyField(related_name='coded_documents', through='django_learning.Code', to='django_learning.Label'),
        ),
        migrations.AddField(
            model_name='document',
            name='command_logs',
            field=models.ManyToManyField(related_name='document_related', to='django_commander.CommandLog'),
        ),
        migrations.AddField(
            model_name='document',
            name='commands',
            field=models.ManyToManyField(related_name='document_related', to='django_commander.Command'),
        ),
        migrations.AddField(
            model_name='document',
            name='entities',
            field=models.ManyToManyField(related_name='documents', to='django_learning.Entity'),
        ),
        migrations.AddField(
            model_name='document',
            name='paragraphs',
            field=models.ManyToManyField(related_name='parent', to='django_learning.Document'),
        ),
        migrations.AddField(
            model_name='code',
            name='coder',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.Coder'),
        ),
        migrations.AddField(
            model_name='code',
            name='command_logs',
            field=models.ManyToManyField(related_name='code_related', to='django_commander.CommandLog'),
        ),
        migrations.AddField(
            model_name='code',
            name='commands',
            field=models.ManyToManyField(related_name='code_related', to='django_commander.Command'),
        ),
        migrations.AddField(
            model_name='code',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.Document'),
        ),
        migrations.AddField(
            model_name='code',
            name='hit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.HIT'),
        ),
        migrations.AddField(
            model_name='code',
            name='label',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.Label'),
        ),
        migrations.AddField(
            model_name='code',
            name='sample_unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='django_learning.SampleUnit'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='coder',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='django_learning.Coder'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='command_logs',
            field=models.ManyToManyField(related_name='assignment_related', to='django_commander.CommandLog'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='commands',
            field=models.ManyToManyField(related_name='assignment_related', to='django_commander.Command'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='hit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='django_learning.HIT'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='django_learning.Project'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='django_learning.Sample'),
        ),
        migrations.AlterUniqueTogether(
            name='word2vecmodel',
            unique_together=set([('frame', 'window_size', 'use_skipgrams', 'use_sentences', 'dimensions')]),
        ),
        migrations.AlterUniqueTogether(
            name='topicmodel',
            unique_together=set([('frame', 'num_topics', 'decay', 'offset', 'passes', 'sample_size', 'chunk_size')]),
        ),
        migrations.AlterUniqueTogether(
            name='topic',
            unique_together=set([('num', 'model')]),
        ),
        migrations.AlterUniqueTogether(
            name='sampleunit',
            unique_together=set([('document', 'sample')]),
        ),
        migrations.AlterUniqueTogether(
            name='sample',
            unique_together=set([('project', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together=set([('project', 'qualification_test', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='ngramset',
            unique_together=set([('name', 'dictionary')]),
        ),
        migrations.AlterUniqueTogether(
            name='label',
            unique_together=set([('question', 'value')]),
        ),
        migrations.AlterUniqueTogether(
            name='hittype',
            unique_together=set([('project', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='entity',
            unique_together=set([('name', 'tag')]),
        ),
        migrations.AlterUniqueTogether(
            name='documenttopic',
            unique_together=set([('topic', 'document')]),
        ),
        migrations.AlterUniqueTogether(
            name='documentngramset',
            unique_together=set([('ngram_set', 'document')]),
        ),
    ]
